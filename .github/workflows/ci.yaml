# THIS FILE WAS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT.
#
# Generated on 2024-02-21T10:59:05Z by kres latest.

env:
  USERNAME: ${{ github.repository_owner }}
  PLATFORM: linux/arm64
  PKGS_PREFIX: ghcr.io/${{ github.repository_owner }}
  PKGS: v1.6.5-orangepi5
  CI_ARGS: --provenance=true
  TARGETS: chelsio-drivers thunderbolt usb-modem-drivers binfmt-misc btrfs

name: default
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
"on":
  push:
    branches:
      - main
      - release-*
    tags:
      - v*
  pull_request:
    branches:
      - main
      - release-*
jobs:
  default:
    permissions:
      actions: read
      contents: write
      issues: read
      packages: write
      pull-requests: read
      id-token: write
    runs-on:
      - ubuntu-latest
    if: (!startsWith(github.head_ref, 'renovate/') && !startsWith(github.head_ref, 'dependabot/'))
    outputs:
      labels: ${{ steps.retrieve-pr-labels.outputs.result }}
    services:
      buildkitd:
        image: moby/buildkit:v0.12.5
        options: --privileged
        ports:
          - 1234:1234
        volumes:
          - /var/lib/buildkit/${{ github.repository }}:/var/lib/buildkit
          - /usr/etc/buildkit/buildkitd.toml:/etc/buildkit/buildkitd.toml
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Unshallow
        run: |
          git fetch --prune --unshallow
      - name: Set up Namespace CLI
        uses: namespacelabs/nscloud-setup@v0
      - name: Set up Docker Buildx
        uses: namespacelabs/nscloud-setup-buildx-action@v0
      - name: Build
        run: |
          make TARGETS="${{ env.TARGETS }}"
      - name: Build nonfree
        run: |
          make nonfree NONFREE_TARGETS="${{ env.NONFREE_TARGETS }}"
      - name: Login to registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          username: ${{ github.repository_owner }}
      - name: Push to registry
        if: github.event_name != 'pull_request'
        run: |
          make PUSH=true TARGETS="${{ env.TARGETS }}"
      - name: Push nonfree
        if: github.event_name != 'pull_request'
        run: |
          make nonfree PUSH=true NONFREE_TARGETS="${{ env.NONFREE_TARGETS }}"
      - name: Retrieve PR labels
        id: retrieve-pr-labels
        uses: actions/github-script@v7
        with:
          retries: "3"
          script: |
            if (context.eventName != "pull_request") { return "[]" }

            const resp = await github.rest.issues.get({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
            })

            return resp.data.labels.map(label => label.name)
      - name: Set up crane
        if: github.event_name != 'pull_request'
        run: |
          curl -sL "https://github.com/google/go-containerregistry/releases/latest/download/go-containerregistry_Linux_x86_64.tar.gz" > go-containerregistry.tar.gz
          tar -zxvf go-containerregistry.tar.gz -C /usr/local/bin/ crane
      - name: extensions
        if: github.event_name != 'pull_request'
        env:
          PUSH: "true"
        run: |
          make extensions TARGETS="${{ env.TARGETS }}" NONFREE_TARGETS="${{ env.NONFREE_TARGETS }}"
      - name: Set up cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.3.0
      - name: Sign images
        if: github.event_name != 'pull_request'
        run: |
          make sign-images
      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: crazy-max/ghaction-github-release@v2
        with:
          draft: "true"
  reproducibility:
    runs-on:
      - self-hosted
      - pkgs
    if: contains(fromJSON(needs.default.outputs.labels), 'integration/reproducibility')
    needs:
      - default
    services:
      buildkitd:
        image: moby/buildkit:v0.12.5
        options: --privileged
        ports:
          - 1234:1234
        volumes:
          - /var/lib/buildkit/${{ github.repository }}:/var/lib/buildkit
          - /usr/etc/buildkit/buildkitd.toml:/etc/buildkit/buildkitd.toml
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Unshallow
        run: |
          git fetch --prune --unshallow
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          append: |
            - endpoint: tcp://buildkit-arm64.ci.svc.cluster.local:1234
              platforms: linux/arm64
          driver: remote
          endpoint: tcp://localhost:1234
      - name: reproducibility-test
        run: |
          make reproducibility-test
